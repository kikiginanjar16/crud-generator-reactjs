import React from 'react';
import { Form, Input, Select, Button, Upload, message } from 'antd';
import { UploadOutlined } from '@ant-design/icons';
import <% component_name %>Service from './services/<% component_name %>Service';



interface <% component_name %>FormProps {
  initialValues?: any;
  onSubmit: (values: any) => void;
  onCancel: () => void;
}

const <% component_name %>Form: React.FC<<% component_name %>FormProps> = ({ initialValues, onSubmit, onCancel }) => {
  const [form] = Form.useForm();

  const handleSubmit = async (values: any) => {
    try {
      if (initialValues && initialValues.id) {
        await <% component_name %>Service.update(initialValues.id, values);
        message.success('<% component_name %> updated successfully');
      } else {
        await <% component_name %>Service.create(values);
        message.success('<% component_name %> created successfully');
      }
      onSubmit(values);
      form.resetFields();
    } catch (error) {
      message.error('Failed to save <% component_name|lower %>');
    }
  };

  return (
    <div className="<% component_name|lower %>-form-container">
      <Form
        form={form}
        layout="vertical"
        initialValues={initialValues}
        onFinish={handleSubmit}
      >
        [% for field in form.fields %]
        <Form.Item
          name="<% field.key %>"
          label="<% field.label %>"
          rules={[{ required: <% field.required|lower %>, message: 'Please input <% field.label|lower %>!' }]}
          [% if field.type == 'file' %]
          valuePropName="fileList"
          getValueFromEvent={normFile}
          [% endif %]
        >
          [% if field.type == 'select' %]
          <Select placeholder="<% field.placeholder %>">
            [% for option in field.options %]
            <Select.Option value="<% option %>"><% option %></Select.Option>
            [% endfor %]
          </Select>
          [% elif field.type == 'file' %]
          <Upload
            name="<% field.key %>"
            listType="picture"
            maxCount={1}
            accept="<% field.accept %>"
            beforeUpload={() => false}
          >
            <Button icon={<UploadOutlined />}><% field.placeholder %></Button>
          </Upload>
          [% elif field.type == 'textarea' %]
          <Input.TextArea
            placeholder="<% field.placeholder %>"
          />
          [% else %]
          <Input type="<% field.type %>" placeholder="<% field.placeholder %>" />
          [% endif %]
        </Form.Item>
        [% endfor %]
        <Form.Item>
          <div className='flex items-center justify-end'>
          <Button style={{ marginRight: 8 }} onClick={onCancel}>
            Cancel
          </Button>
          <Button type="primary" htmlType="submit">
            {initialValues ? 'Update' : 'Create'}
          </Button>
          </div>
        </Form.Item>
      </Form>
      </Form>
    </div>
  );
};

export default <% component_name %>Form;