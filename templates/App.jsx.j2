import React, { useState,useEffect } from 'react';
import { Modal, Button, message, Breadcrumb } from 'antd';
[% for component in components %]
import <% component.name %>List from './<% component.name %>List';
import <% component.name %>Form from './<% component.name %>Form';
import <% component.name %>Service from './services/<% component.name %>Service';
[% endfor %]

const <% module %>Page: React.FC = () => {
  const [isModalVisible, setIsModalVisible] = useState<boolean>(false);
  const [currentRecord, setCurrentRecord] = useState<any | null>(null);
  const [data, setData] = useState<any[]>([]);
  const [loading, setLoading] = useState<boolean>(false);
  const fetchData = async () => {
    setLoading(true);
    try {
      const response : any = await <% components[0].name %>Service.getAll();
      setData(response.data);
    } catch (error) {
      console.error('Failed to fetch data:', error);
    } finally {
      setLoading(false);
    }
  };
  useEffect(() => {
    fetchData();
  }, []);

  const handleEdit = (record: any) => {
    setCurrentRecord(record);
    setIsModalVisible(true);
    fetchData();
  };

  const handleDelete = async (id: string) => {
    setLoading(true);
    try {
      await <% components[0].name %>Service.delete(id);
      setData(data.filter(item => item.id !== id));
      message.success('<% components[0].name %> deleted successfully');
      fetchData();
    } catch (error) {
      message.error('Failed to delete <% components[0].name|lower %>');
    }  finally {
      setLoading(false);
    }
  };

  const handleSubmit = (values: any) => {
    setIsModalVisible(false);
    setCurrentRecord(null);
    fetchData();
  };

  const handleCancel = () => {
    setIsModalVisible(false);
    setCurrentRecord(null);
    fetchData();
  };

  return (
    <div className="app-container">
      <div className='flex justify-between items-center mb-4'>
          <div>
            <h2 className="text-xl font-bold"><% module %></h2>
            <Breadcrumb
              className='mb-4'
              items={[
                { title: 'Home', href: '/' },
                { title: '<% module %>', href: '/<% components[0].endpoint|lower %>' },
              ]}
            />
          </div>

          <Button
            loading={loading}
            size='large'
            type="primary"
            onClick={() => setIsModalVisible(true)}
            style={{ marginBottom: 16 }}
          >
            Create New
          </Button>
      </div>
      <div className="flex justify-start items-center mb-4">
        <Input.Search
          size='large'
          style={{ width: 300, marginRight: 16 }}
          placeholder="Search..."
          className="search-input"
          onChange={(e) => {
            const searchTerm = e.target.value.toLowerCase();
            const filteredData = data.filter(item =>
              Object.values(item).some(value =>
                String(value).toLowerCase().includes(searchTerm)
              )
            );
            setData(filteredData);
          }}
        />
      </div>

      [% for component in components %]
      <<% component.name %>List onEdit={handleEdit} onDelete={handleDelete} data={data} loading={loading} />
      [% endfor %]
      <Modal
        title={currentRecord ? 'Edit <% components[0].name %>' : 'Add <% components[0].name %>'}
        open={isModalVisible}
        footer={null}
        onCancel={handleCancel}
      >
        <<% components[0].name %>Form
          initialValues={currentRecord}
          onSubmit={handleSubmit}
          onCancel={handleCancel}
        />
      </Modal>
    </div>
  );
};

export default <% module %>Page;